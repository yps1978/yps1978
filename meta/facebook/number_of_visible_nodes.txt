Number of Visible Nodes
There is a binary tree with N nodes. You are viewing the tree from its left side and can see only the leftmost nodes at each level. Return the number of visible nodes.
Note: You can see only the leftmost nodes, but that doesn't mean they have to be left nodes. The leftmost node at a level could be a right node.
Signature
int visibleNodes(Node root) {
Input
The root node of a tree, where the number of nodes is between 1 and 1000, and the value of each node is between 0 and 1,000,000,000
Output
An int representing the number of visible nodes.
Example
            8  <------ root
           / \
         3    10
        / \     \
       1   6     14
          / \    /
         4   7  13            
output = 4


using System;

// We don’t provide test cases in this language yet. Please write your code below, and don’t forget to test edge cases!
class Node{
    public int val {get;set;}
    public Node left {get;set;}
    public Node right {get;set;}

    public Node(int val)
    {
        this.val = val;
    }
}

class NumberOfVisibleNodes
{
    static int testCaseNo = 0;

    static void Main(string[] args)
    {
        var root = new Node(8);
        root.left = new Node(3);
        root.right = new Node(10);
        root.left.left = new Node(1);
        root.left.right = new Node(6);
        root.left.right.left = new Node(4);
        root.left.right.right = new Node(7);
        root.right.right = new Node(14);
        root.right.right.left = new Node(13);
        var expected = 4;
        var actual = visibleNodes(root);
        check(expected, actual);
        
        root = new Node(10);
        root.left = new Node(8);
        root.right = new Node(15);
        root.left.left = new Node(4);
        root.left.left.right = new Node(5);
        root.left.left.right.right = new Node(6);
        root.right.left = new Node(14);
        root.right.right = new Node(16);
        expected = 5;
        actual = visibleNodes(root);
        check(expected, actual);
        
    }

    private static int visibleNodes(Node node)
    {
        if (node==null)
            return 0;
        
        return 1 + Math.Max(visibleNodes(node.left), visibleNodes(node.right));
    }

    private static bool check(int expected, int actual)
    {
        testCaseNo++;
        var result = expected == actual;
        
        if (result)
            Console.WriteLine("Test Case {0} - PASS", testCaseNo);
        else
        {
            Console.WriteLine("Test Case {0} - FAILED", testCaseNo);
            Console.WriteLine("Expected: {0}", expected);
            Console.WriteLine("Actual: {0}", actual);
        }
        Console.WriteLine();

        return result;
    }

}
