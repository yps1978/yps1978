1 Billion Users
We have N different apps with different user growth rates. At a given time t, measured in days, the number of users using an app is g^t (for simplicity we'll allow fractional users), where g is the growth rate for that app. These apps will all be launched at the same time and no user ever uses more than one of the apps. We want to know how many total users there are when you add together the number of users from each app.
After how many full days will we have 1 billion total users across the N apps?
Signature
int getBillionUsersDay(float[] growthRates)
Input
1.0 < growthRate < 2.0 for all growth rates
1 <= N <= 1,000
Output
Return the number of full days it will take before we have a total of 1 billion users across all N apps.
Example 1
growthRates = [1.5]
output = 52
Example 2
growthRates = [1.1, 1.2, 1.3]
output = 79
Example 3
growthRates = [1.01, 1.02]
output = 1047


using System;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to test edge cases!
class BillionUsers {
    private static int testCaseNo = 0;
    
    static void Main(string[] args) {
        // Call GetBillionUsersDay() with test cases here
        var inputGrowthRates = new []{1.5f};
        var expected = 52;
        var actual = GetBillionUsersDay(inputGrowthRates);
        check(expected, actual);
        
        inputGrowthRates = new[]{1.1f, 1.2f, 1.3f};
        expected = 79;
        actual = GetBillionUsersDay(inputGrowthRates);
        check(expected, actual);
        
        inputGrowthRates = new[]{1.01f, 1.02f};
        expected = 1047;
        actual = GetBillionUsersDay(inputGrowthRates);
        check(expected, actual);
    }

    private static int GetBillionUsersDay(float[] growthRates) {
        // Write your code here
        var usersPerApp = new float[growthRates.Length];
        for (var i=0; i<growthRates.Length; i++)
            usersPerApp[i] = growthRates[i];

        var t=1;
        float userCount;
        do
        {
            t++;
            userCount=0;
            for (var i=0; i<growthRates.Length; i++)
            {
                usersPerApp[i] *= growthRates[i];
                userCount += usersPerApp[i];
            }
        } while (userCount < 1000000000);
        
        return t;
    }
    
    private static bool check(int expected, int actual)
    {
        testCaseNo++;
        var result = expected == actual;
        
        if (result)
            Console.WriteLine("Test Case {0} - PASS", testCaseNo);
        else
        {
            Console.WriteLine("Test Case {0} - FAILED", testCaseNo);
            Console.WriteLine("Expected: {0}", expected);
            Console.WriteLine("Actual: {0}", actual);
        }
        Console.WriteLine();
        
        return result;
    }
}
