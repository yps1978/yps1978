Balanced Split
Given an array of integers (which may include repeated integers), determine if there's a way to split the array into two subsequences A and B such that the sum of the integers in both arrays is the same, and all of the integers in A are strictly smaller than all of the integers in B.
Note: Strictly smaller denotes that every integer in A must be less than, and not equal to, every integer in B.
Signature
bool balancedSplitExists(int[] arr)
Input
All integers in array are in the range [0, 1,000,000,000].
Output
Return true if such a split is possible, and false otherwise.
Example 1
arr = [1, 5, 7, 1]
output = true
We can split the array into A = [1, 1, 5] and B = [7].
Example 2
arr = [12, 7, 6, 7, 6]
output = false
We can't split the array into A = [6, 6, 7] and B = [7, 12] since this doesn't satisfy the requirement that all integers in A are smaller than all integers in B.


using System;
using System.Collections.Generic;

class Test{
    private static int testCaseNo = 0;
    
    static void Main(string[] args)
    {
        var input = new[] {1,5,7,1};
        var expected = true;
        var actual = balancedSplitExists(input);
        check(expected, actual);
        
        input = new[] {1,5,7,2};
        expected = false;
        actual = balancedSplitExists(input);
        check(expected, actual);
        
        input = new[] {2, 2};
        expected = true;
        actual = balancedSplitExists(input);
        check(expected, actual);
    }
    
    private static bool balancedSplitExists(int[] arr)
    {
        if (arr==null || arr.Length<=1)
            return false;
        
        var list = sort(arr);
        
        int i=0, j=arr.Length-1;
        int leftSum = 0, rightSum = 0;
        while (i <= j)
        {
            if (leftSum <= rightSum)
            {
                leftSum += list[i];
                i++;
            }
            else
            {
                rightSum += list[j];
                j--;
            }
        }
        
        return leftSum == rightSum;
    }
    
    private static bool check(bool expected, bool actual){
        testCaseNo++;
        
        var result = expected == actual;
        
        if (result)
            Console.WriteLine("Test Case {0} - PASS", testCaseNo);
        else
        {
            Console.WriteLine("Test Case {0} - FAILED", testCaseNo);
            Console.WriteLine("Expected: {0}", expected);
            Console.WriteLine("Actual: {0}", actual);
        }
        Console.WriteLine();
        
        return result;
    }
    
    private static int[] sort(int[] arr)
    {
        if (arr.Length<=1)
            return arr;
        
        var pivot = (arr[0] + arr[arr.Length-1]) / 2;
        
        var left = new List<int>();
        var middle = new List<int>();
        var right = new List<int>();
        
        for (int i=0; i<arr.Length; i++)
            if (arr[i] < pivot)
                left.Add(arr[i]);
            else if (arr[i] > pivot)
                right.Add(arr[i]);
            else
                middle.Add(arr[i]);
        
        var result = new int[arr.Length];
        
        sort(left.ToArray()).CopyTo(result, 0);
        middle.CopyTo(result, left.Count);
        sort(right.ToArray()).CopyTo(result, left.Count + middle.Count);
        
        return result;
    }
}
