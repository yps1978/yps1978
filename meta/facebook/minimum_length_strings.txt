Minimum Length Substrings
You are given two strings s and t. You can select any substring of string s and rearrange the characters of the selected substring. Determine the minimum length of the substring of s such that string t is a substring of the selected substring.
Signature
int minLengthSubstring(String s, String t)
Input
s and t are non-empty strings that contain less than 1,000,000 characters each
Output
Return the minimum length of the substring of s. If it is not possible, return -1
Example
s = "dcbefebce"
t = "fd"'
output = 5
Explanation:
Substring "dcbef" can be rearranged to "cfdeb", "cefdb", and so on. String t is a substring of "cfdeb". Thus, the minimum length required is 5.


using System;
using System.Collections.Generic;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to
public class MinimumLengthSubstrings {
    
    static int testCaseNo = 0;
    
    static void Main(String[] args) {
        //Call minLengthSubstring with test cases here
        var s1 = "dcbefebce";
        var t1 = "fd";
        var expected_1 = 5;
        var output_1 = minLengthSubstring(s1, t1);
        check(expected_1, output_1);

        var s2 = "bfbeadbcbcbfeaaeefcddcccbbbfaaafdbebedddf";
        var t2 = "cbccfafebccdccebdd";
        var expected_2 = -1;
        var output_2 = minLengthSubstring(s2, t2);
        check(expected_2, output_2);

        var s3 = "algorithm";
        var t3 = "rita";
        var expected_3 = 7;
        var output_3 = minLengthSubstring(s3, t3);
        check(expected_3, output_3);

        var s4 = "raraita";
        var t4 = "rai";
        var expected_4 = 3;
        var output_4 = minLengthSubstring(s4, t4);
        check(expected_4, output_4);
        
        var s5 = "aaa";
        var t5 = "aa";
        var expected_5 = 2;
        var output_5 = minLengthSubstring(s5, t5);
        check(expected_5, output_5);
    }

    private static int minLengthSubstring(String s, String t) {
        // Write your code here
        var result = -1;
        
        var subStr = t;
        int i=0;
        var indexesTaken = new List<int>();

        while (subStr.Length>0 && i < s.Length)
        {
            if (t.IndexOf(s[i]) > -1)
            {
                if (subStr.IndexOf(s[i])>-1)
                    subStr = subStr.Remove(subStr.IndexOf(s[i]), 1);
                else if (indexesTaken.Count>0 && s[indexesTaken[0]] == s[i] && subStr.IndexOf(s[i])==-1)
                {
                    // no more occurrences of this character
                    indexesTaken.RemoveAt(0);
                }
                
                indexesTaken.Add(i);
            }
            i++;
        }
        if (subStr.Length==0 && indexesTaken.Count>0)
        {
            if (indexesTaken.Count==1)
                result = 1;
            else
                result = indexesTaken[indexesTaken.Count-1]+1 - indexesTaken[0];
        }
        
        return result;
    }
    
    private static bool check(int expected, int actual)
    {
        var result = expected == actual;
        
        testCaseNo++;
        
        if (result)
            Console.WriteLine("Test case {0} - PASS", testCaseNo);
        else
        {
            Console.WriteLine("Test case {0} - FAILED", testCaseNo);
            Console.WriteLine("Expected: {0}", expected);
            Console.WriteLine("Actual {0}", actual);
        }
        Console.WriteLine("");

        return result;
    }
}

