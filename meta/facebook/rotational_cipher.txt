Rotational Cipher
One simple way to encrypt a string is to "rotate" every alphanumeric character by a certain amount. Rotating a character means replacing it with another character that is a certain number of steps away in normal alphabetic or numerical order.
For example, if the string "Zebra-493?" is rotated 3 places, the resulting string is "Cheud-726?". Every alphabetic character is replaced with the character 3 letters higher (wrapping around from Z to A), and every numeric character replaced with the character 3 digits higher (wrapping around from 9 to 0). Note that the non-alphanumeric characters remain unchanged.
Given a string and a rotation factor, return an encrypted string.
Signature
string rotationalCipher(string input, int rotationFactor)
Input
1 <= |input| <= 1,000,000
0 <= rotationFactor <= 1,000,000
Output
Return the result of rotating input a number of times equal to rotationFactor.
Example 1
input = Zebra-493?
rotationFactor = 3
output = Cheud-726?
Example 2
input = abcdefghijklmNOPQRSTUVWXYZ0123456789
rotationFactor = 39
output = nopqrstuvwxyzABCDEFGHIJKLM9012345678


using System;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to
public class RotationalCipher {
  static void Main(String[] args) {
    // Call rotationalCipher with test cases here
    var inputString = "Zebra-493?";
      var rotationFactor = 3;
      var expected = "Cheud-726?";
      var actual = rotationalCipher(inputString, rotationFactor);
      check(expected, actual);
      
      inputString = "abcdefghijklmNOPQRSTUVWXYZ0123456789";
      rotationFactor = 39;
      expected = "nopqrstuvwxyzABCDEFGHIJKLM9012345678";
      actual = rotationalCipher(inputString, rotationFactor);
      check(expected, actual);
      
      inputString = "1";
      rotationFactor = 6;
      expected = "7";
      actual = rotationalCipher(inputString, rotationFactor);
      check(expected, actual);
    
      inputString = "";
      rotationFactor = 1;
      expected = "";
      actual = rotationalCipher(inputString, rotationFactor);
      check(expected, actual);
  }
  
  private static string rotationalCipher(String input, int rotationFactor) {
    var lowChars = "abcdefghijklmnopqrstuvwxyz";
    var uppChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    var digits = "0123456789";
    var result= "";
    for (var i=0; i<input.Length; i++)
        if (lowChars.IndexOf(input[i])>-1)
            result += lowChars[(lowChars.IndexOf(input[i]) + rotationFactor) % 26];
        else if (uppChars.IndexOf(input[i])>-1)
            result += uppChars[(uppChars.IndexOf(input[i]) + rotationFactor) % 26];
        else if (digits.IndexOf(input[i])>-1)
            result += digits[(digits.IndexOf(input[i]) + rotationFactor) % 10];
        else result += input[i];

    return result;
  }
  
  static int testCaseNo = 1;
  private static bool check(string expected, string actual){
    var result = expected == actual;

    if (result)
        Console.WriteLine("Test # {0}, PASS", testCaseNo);
    else
    {
        Console.WriteLine("Test # {0}, FAILED", testCaseNo);
        Console.WriteLine("Expected: {0}", expected);
        Console.WriteLine("Actual: {0}", actual);
    }
    Console.WriteLine("");
    testCaseNo++;
    return result;
  }
}
