Slow Sums
Suppose we have a list of N numbers, and repeat the following operation until we're left with only a single number: Choose any two numbers and replace them with their sum. Moreover, we associate a penalty with each operation equal to the value of the new number, and call the penalty for the entire list as the sum of the penalties of each operation.
For example, given the list [1, 2, 3, 4, 5], we could choose 2 and 3 for the first operation, which would transform the list into [1, 5, 4, 5] and incur a penalty of 5. The goal in this problem is to find the worst possible penalty for a given input.
Signature:
int getTotalTime(int[] arr)
Input:
An array arr containing N integers, denoting the numbers in the list.
Output format:
An int representing the worst possible total penalty.
Constraints:
1 ≤ N ≤ 10^6
1 ≤ Ai ≤ 10^7, where *Ai denotes the ith initial element of an array.
The sum of values of N over all test cases will not exceed 5 * 10^6.
Example
arr = [4, 2, 1, 3]
output = 26
First, add 4 + 3 for a penalty of 7. Now the array is [7, 2, 1]
Add 7 + 2 for a penalty of 9. Now the array is [9, 1]
Add 9 + 1 for a penalty of 10. The penalties sum to 26.


using System;
using System.Collections.Generic;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to test edge cases!
class SlowSums {
    static int testCaseNo = 0;
    
    static void Main(string[] args) {
        // Call getTotalTime() with test cases here
        
        var inputArr = new []{4,2,1,3};
        var expected = 26;
        var actual = getTotalTime(inputArr);
        check(expected, actual);
        
        inputArr = new []{4};
        expected = 4;
        actual = getTotalTime(inputArr);
        check(expected, actual);
        
        inputArr = new []{7,2,1};
        expected = 19;
        actual = getTotalTime(inputArr);
        check(expected, actual);
    }

    private static int getTotalTime(int[] arr) {
        // Write your code here
        if (arr.Length==0)
            return 0;
        else if (arr.Length==1)
            return arr[0];
        
        var result = 0;
        var list = new List<int>(arr);
        list.Sort();
        
        var temp = list.ToArray();
        
        for (var i=temp.Length-1; i>0; i--)
        {
            temp[i-1] = temp[i] + temp[i-1];
            result += temp[i-1];
        }
        
        return result;
    }
    
 
    private static bool check(int expected, int actual)
    {
        testCaseNo++;
        
        var result = expected == actual;
        
        if (result)
            Console.WriteLine("Test Case {0} - PASS", testCaseNo);
        else
        {
            Console.WriteLine("Test Case {0} - FAILED", testCaseNo);
            Console.WriteLine("Expected: {0}", expected);
            Console.WriteLine("Actual {0}", actual);
        }
        Console.WriteLine("");
        
        return result;
    }
}
