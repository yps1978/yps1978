Magical Candy Bags
You have N bags of candy. The ith bag contains arr[i] pieces of candy, and each of the bags is magical!
It takes you 1 minute to eat all of the pieces of candy in a bag (irrespective of how many pieces of candy are inside), and as soon as you finish, the bag mysteriously refills. If there were x pieces of candy in the bag at the beginning of the minute, then after you've finished you'll find that floor(x/2) pieces are now inside.
You have k minutes to eat as much candy as possible. How many pieces of candy can you eat?
Signature
int maxCandies(int[] arr, int K)
Input
1 ≤ N ≤ 10,000
1 ≤ k ≤ 10,000
1 ≤ arr[i] ≤ 1,000,000,000
Output
A single integer, the maximum number of candies you can eat in k minutes.
Example 1
N = 5 
k = 3
arr = [2, 1, 7, 4, 2]
output = 14
In the first minute you can eat 7 pieces of candy. That bag will refill with floor(7/2) = 3 pieces.
In the second minute you can eat 4 pieces of candy from another bag. That bag will refill with floor(4/2) = 2 pieces.
In the third minute you can eat the 3 pieces of candy that have appeared in the first bag that you ate.
In total you can eat 7 + 4 + 3 = 14 pieces of candy.


using System;
using System.Collections.Generic;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to test edge cases!
class MagicalCandyBags {
    static void Main(string[] args) {
        // Call maxCandies() with test cases here
        var inputK = 3;
        var inputArr = new []{2, 1, 7, 4, 2};
        var expected = 14;
        var actual = maxCandies(inputArr, inputK);
        check(expected, actual);
        
        inputK = 3;
        inputArr = new []{19, 78, 76, 72, 48, 8, 24, 74, 29};
        expected = 228;
        actual = maxCandies(inputArr, inputK);
        check(expected, actual);
        
        inputK = 5;
        inputArr = new []{256, 127, 200, 65, 100, 33, 14, 7, 3};
        expected = 811;
        actual = maxCandies(inputArr, inputK);
        check(expected, actual);
    }

    private static int maxCandies(int[] arr, int k) {
        // Write your code here
        var sortedList = new List<int>(arr);
        sortedList.Sort();
        var smallList = new List<int>();
        
        var maxNoCandies=0;
        for (var i=0; i<k; i++)
        {
            var idxSorted = sortedList.Count - 1;
            var idxSmall = smallList.Count - 1;
            
            if (idxSmall<0 || sortedList[idxSorted] > smallList[idxSmall])
            {
                maxNoCandies += sortedList[idxSorted];
                smallList.Insert(0, (int)(sortedList[idxSorted] / 2));
                sortedList.RemoveAt(idxSorted);
            }
            else
            {
                maxNoCandies += smallList[idxSmall];
                smallList.Insert(0, (int)(smallList[idxSmall] / 2));
                smallList.RemoveAt(idxSmall+1);
            }
            
        }
        
        return maxNoCandies;
    }

    static int testCaseNo = 1;
    private static bool check(int expected, int actual){
        var result = expected == actual;
        
        var rightTick = "\u2713";
        var wrongTick = "\u2717";
        
        if (result)
            Console.WriteLine("{0}Test case #{1}, PASS", rightTick, testCaseNo);
        else
        {
            Console.WriteLine("{0}Test case #{1}, FAILED", wrongTick, testCaseNo);
            Console.WriteLine("Expected: {0}", String.Join(",", expected));
            Console.WriteLine("Actual: {0}", String.Join(",", actual));
        }
        Console.WriteLine();
        
        testCaseNo++;
        
        return result;
    }
}
