Largest Triple Products
You're given a list of n integers arr[0..(n-1)]. You must compute a list output[0..(n-1)] such that, for each index i (between 0 and n-1, inclusive), output[i] is equal to the product of the three largest elements out of arr[0..i] (or equal to -1 if i < 2, as arr[0..i] then includes fewer than three elements).
Note that the three largest elements used to form any product may have the same values as one another, but they must be at different indices in arr.
Signature
int[] findMaxProduct(int[] arr)
Input
n is in the range [1, 100,000].
Each value arr[i] is in the range [1, 1,000].
Output
Return a list of n integers output[0..(n-1)], as described above.
Example 1
n = 5
arr = [1, 2, 3, 4, 5]
output = [-1, -1, 6, 24, 60]
The 3rd element of output is 3*2*1 = 6, the 4th is 4*3*2 = 24, and the 5th is 5*4*3 = 60.
Example 2
n = 5
arr = [2, 1, 2, 1, 2]
output = [-1, -1, 4, 4, 8]
The 3rd element of output is 2*2*1 = 4, the 4th is 2*2*1 = 4, and the 5th is 2*2*2 = 8.


using System;

// We don’t provide test cases in this language yet, but have outlined the signature for you. Please write your code below, and don’t forget to test edge cases!
class LargestTripleProducts {
    static void Main(string[] args) {
        // Call findMaxProduct() with test cases here
        var input = new []{1, 2, 3, 4, 5};
        var expected = new []{-1, -1, 6, 24, 60};
        var actual = findMaxProduct(input);
        check(expected, actual);
        
        input = new []{2, 1, 2, 1, 2};
        expected = new[]{-1, -1, 4, 4, 8};
        actual = findMaxProduct(input);
        check(expected, actual);
        
        input = new []{2,1,3,1,2,3};
        expected = new[]{-1, -1, 6, 6, 12, 18};
        actual = findMaxProduct(input);
        check(expected, actual);
    }

    private static int[] findMaxProduct(int[] arr) {
        // Write your code here
        var result = new int[arr.Length];
        result[0] = result[1] = -1;
        
        var max = new []{0, Math.Min(arr[0], arr[1]), Math.Max(arr[0], arr[1])};
        
        for (var i=2; i<arr.Length; i++)
        {
            // calculate max
            if (arr[i] >= max[2])
                (max[0], max[1], max[2]) = (max[1], max[2], arr[i]);
            else if (arr[i] >= max[1])
                (max[0], max[1]) = (max[1], arr[i]);
            else if (arr[i] >= max[0])
                max[0] = arr[i];
            
            result[i] = max[0] * max[1] * max[2];
        }
            
        return result;
    }

    static int testCaseNo = 1;
    private static bool check(int[] expected, int[] actual){
        var result = expected?.Length == actual?.Length;
        
        var rightTick = "\u2713";
        var wrongTick = "\u2717";
        
        if (result)
        {
            for (var i=0; i<expected.Length; i++)
                if (expected[i]!=actual[i])
                {
                    result = false;
                    break;
                }
        }
        
        if (result)
            Console.WriteLine("{0}Test case #{1}, PASS", rightTick, testCaseNo);
        else
        {
            Console.WriteLine("{0}Test case #{1}, FAILED", wrongTick, testCaseNo);
            Console.WriteLine("Expected: {0}", String.Join(",", expected));
            Console.WriteLine("Actual: {0}", String.Join(",", actual));
        }
        Console.WriteLine();
        
        testCaseNo++;
        
        return result;
    }
}
